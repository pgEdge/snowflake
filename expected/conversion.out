/*
 * A series of tests on transformation of serial and IDENTITY columns to the
 * Snowflake-default ones.
 */
\set VERBOSITY terse
SET snowflake.node = 1;
CREATE EXTENSION snowflake;
-- Need to check two types of serial values: DEFAULT and IDENTITY
CREATE TABLE t1(x serial);
CREATE TABLE t2 (x integer GENERATED ALWAYS AS IDENTITY);
CREATE TABLE t3 (x integer GENERATED BY DEFAULT AS IDENTITY,
				 y serial NOT NULL, z serial NOT NULL CHECK (y > 0));
CREATE SEQUENCE seq_1 START 42;
INSERT INTO t1 VALUES (DEFAULT);
INSERT INTO t2 VALUES (DEFAULT);
INSERT INTO t3 VALUES (DEFAULT);
SELECT snowflake.convert_sequence_to_snowflake('t1'); -- ERROR, not a sequence
ERROR:  Input value "public.t1" is not used by any relation as a DEFAULT value or an IDENTITY
SELECT snowflake.convert_sequence_to_snowflake('seq_1'); -- ERROR, not assocoated with any relation
ERROR:  Input value "public.seq_1" is not used by any relation as a DEFAULT value or an IDENTITY
SELECT snowflake.convert_sequence_to_snowflake('t1_x_seq');
NOTICE:  EXECUTE ALTER TABLE public.t1 ALTER COLUMN x SET DATA TYPE int8
NOTICE:  EXECUTE ALTER TABLE public.t1 ALTER COLUMN x SET DEFAULT snowflake.nextval('public.t1_x_seq'::regclass)
NOTICE:  ALTER SEQUENCE public.t1_x_seq NO CYCLE MAXVALUE 2
 convert_sequence_to_snowflake 
-------------------------------
                             1
(1 row)

SELECT snowflake.convert_sequence_to_snowflake('t2_x_seq');
NOTICE:  Update pg_attribute: reset attidentity value for table public.t2, column x
NOTICE:  EXECUTE ALTER TABLE public.t2 ALTER COLUMN x SET DATA TYPE int8
NOTICE:  EXECUTE ALTER TABLE public.t2 ALTER COLUMN x SET DEFAULT snowflake.nextval('public.t2_x_seq'::regclass)
NOTICE:  ALTER SEQUENCE public.t2_x_seq NO CYCLE MAXVALUE 2
 convert_sequence_to_snowflake 
-------------------------------
                             1
(1 row)

SELECT snowflake.convert_sequence_to_snowflake('t3_x_seq');
NOTICE:  Update pg_attribute: reset attidentity value for table public.t3, column x
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN x SET DATA TYPE int8
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN x SET DEFAULT snowflake.nextval('public.t3_x_seq'::regclass)
NOTICE:  ALTER SEQUENCE public.t3_x_seq NO CYCLE MAXVALUE 2
 convert_sequence_to_snowflake 
-------------------------------
                             1
(1 row)

SELECT snowflake.convert_sequence_to_snowflake('t3_z_seq'); -- non-default attnum
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN z SET DATA TYPE int8
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN z SET DEFAULT snowflake.nextval('public.t3_z_seq'::regclass)
NOTICE:  ALTER SEQUENCE public.t3_z_seq NO CYCLE MAXVALUE 2
 convert_sequence_to_snowflake 
-------------------------------
                             1
(1 row)

INSERT INTO t1 VALUES (DEFAULT);
INSERT INTO t2 VALUES (DEFAULT);
INSERT INTO t3 VALUES (DEFAULT);
-- Check the result of conversion
SELECT x <= 42 AS is_not_snowflake_value FROM t1 ORDER BY x;
 is_not_snowflake_value 
------------------------
 t
 f
(2 rows)

SELECT x <= 42 AS is_not_snowflake_value FROM t2 ORDER BY x;
 is_not_snowflake_value 
------------------------
 t
 f
(2 rows)

SELECT
	x <= 42 AS is_not_snowflake_value,
	y,
	z <= 42 AS is_not_snowflake_value
FROM t3 ORDER BY x;
 is_not_snowflake_value | y | is_not_snowflake_value 
------------------------+---+------------------------
 t                      | 1 | t
 f                      | 2 | f
(2 rows)

ALTER TABLE t3 ALTER COLUMN y SET DEFAULT 1;
SELECT snowflake.convert_sequence_to_snowflake('t3_y_seq');
ERROR:  definition of DEFAULT value for column "y" of relation "t3" does not correspond serial or bigserial type: "1"
INSERT INTO t3 VALUES (DEFAULT);
SELECT
	x <= 42 AS is_not_snowflake_value,
	y,
	z <= 42 AS is_not_snowflake_value
FROM t3 ORDER BY x;
 is_not_snowflake_value | y | is_not_snowflake_value 
------------------------+---+------------------------
 t                      | 1 | t
 f                      | 2 | f
 f                      | 1 | f
(3 rows)

-- Manually set DEFAULT nextval for a column
ALTER TABLE t3 ALTER COLUMN y DROP DEFAULT;
SELECT snowflake.convert_sequence_to_snowflake('t3_y_seq'); -- Should be correctly ignored
ERROR:  definition of DEFAULT value for column "y" of relation "t3" does not correspond serial or bigserial type: "<NULL>"
ALTER TABLE t3 ALTER COLUMN y SET DEFAULT nextval('t3_y_seq'::regclass);
SELECT snowflake.convert_sequence_to_snowflake('t3_y_seq');
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN y SET DATA TYPE int8
NOTICE:  EXECUTE ALTER TABLE public.t3 ALTER COLUMN y SET DEFAULT snowflake.nextval('public.t3_y_seq'::regclass)
NOTICE:  ALTER SEQUENCE public.t3_y_seq NO CYCLE MAXVALUE 3
 convert_sequence_to_snowflake 
-------------------------------
                             1
(1 row)

TRUNCATE t3;
INSERT INTO t3 VALUES (DEFAULT);
SELECT
	x <= 42 AS is_not_snowflake_value,
	y <= 42 AS is_not_snowflake_value,
	z <= 42 AS is_not_snowflake_value
FROM t3 ORDER BY x;
 is_not_snowflake_value | is_not_snowflake_value | is_not_snowflake_value 
------------------------+------------------------+------------------------
 f                      | f                      | f
(1 row)

-- Manual usage of the snowflake default is also legal.
ALTER TABLE t3 ALTER COLUMN y DROP DEFAULT;
ALTER TABLE t3 ALTER COLUMN y SET DEFAULT snowflake.nextval('t3_y_seq'::regclass);
SELECT snowflake.convert_sequence_to_snowflake('t3_y_seq'); -- do not convert, it is already done manually
ERROR:  definition of DEFAULT value for column "y" of relation "t3" does not correspond serial or bigserial type: "snowflake.nextval('public.t3_y_seq'::regclass)"
INSERT INTO t3 VALUES (DEFAULT);
SELECT
	x <= 42 AS is_not_snowflake_value,
	y <= 42 AS is_not_snowflake_value,
	z <= 42 AS is_not_snowflake_value
FROM t3 ORDER BY x;
 is_not_snowflake_value | is_not_snowflake_value | is_not_snowflake_value 
------------------------+------------------------+------------------------
 f                      | f                      | f
 f                      | f                      | f
(2 rows)

-- Cleanup
DROP TABLE t1,t2,t3 CASCADE;
DROP EXTENSION snowflake;
